import 'package:flutter/material.dart';import 'package:flutter_basics/core/theme/app_theme.dart';import 'package:flutter_basics/core/widgets/app_color_picker_dialog.dart';import 'package:flutter_basics/core/widgets/app_dropdown.dart';import 'package:flutter_basics/src/text/cubit/text_cubit.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:syncfusion_flutter_sliders/sliders.dart';/// Text Style Property Widgetclass TextStylePropertyWidget extends StatelessWidget {  /// Default constructor  const TextStylePropertyWidget({super.key});  @override  Widget build(BuildContext context) {    final cubit = context.read<TextCubit>();    return BlocBuilder<TextCubit, TextState>(      builder: (context, state) {        return Column(          mainAxisSize: MainAxisSize.min,          crossAxisAlignment: CrossAxisAlignment.start,          children: [            const Text(              'Text Style',              style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),            ),            const SizedBox(height: 8),            const Text('Font Size'),            ValueListenableBuilder(              valueListenable: cubit.fontSize,              builder: (context, _, __) {                return SfSlider(                  min: 1,                  max: 100,                  enableTooltip: true,                  value: cubit.fontSize.value ?? 1,                  onChanged: (value) {                    cubit.fontSize.value = value as double;                  },                );              },            ),            const SizedBox(height: 8),            AppDropdown(              key: const ValueKey('text-font-weight'),              value: cubit.fontWeight,              items: FontWeight.values                  .map<DropdownMenuItem<FontWeight>>(                    (FontWeight value) => DropdownMenuItem(                      value: value,                      child: Text(value.toString()),                    ),                  )                  .toList(),              labelText: 'Font Weight',              labelStyle: const TextStyle(),              onChanged: cubit.onTextFontWeightChanged,            ),            const SizedBox(height: 8),            AppDropdown(              key: const ValueKey('text-font-family'),              value: cubit.fontFamily,              items: FontFamilyEnum.values                  .map<DropdownMenuItem<FontFamilyEnum>>(                    (FontFamilyEnum value) => DropdownMenuItem(                      value: value,                      child: Text(value.name),                    ),                  )                  .toList(),              labelText: 'Font Family',              labelStyle: const TextStyle(),              onChanged: cubit.onTextFontFamilyChanged,            ),            const SizedBox(height: 8),            AppColorPicker(              key: const ValueKey('text-font-color'),              labelText: 'Font color',              initialColor: cubit.fontColor ?? Colors.white,              onChanged: cubit.onTextFontColorChanged,              labelTextStyle: const TextStyle(),            ),            const SizedBox(height: 8),            AppColorPicker(              key: const ValueKey('text-font-background-color'),              labelText: 'Font background color',              initialColor: cubit.fontBackgroundColor ?? Colors.white,              onChanged: cubit.onTextFontBackgroundColorChanged,              labelTextStyle: const TextStyle(),            ),            const SizedBox(height: 8),            AppDropdown(              key: const ValueKey('text-text-font-style'),              items: FontStyle.values                  .map<DropdownMenuItem<FontStyle>>(                    (FontStyle value) => DropdownMenuItem(                      value: value,                      child: Text(value.name),                    ),                  )                  .toList(),              onChanged: cubit.onTextFontStyleChanged,              value: cubit.fontStyle,              labelStyle: const TextStyle(),              labelText: 'Text Font Style',            ),            const SizedBox(height: 8),            AppDropdown(              key: const ValueKey('text-decoration'),              items: [                TextDecoration.none,                TextDecoration.lineThrough,                TextDecoration.overline,                TextDecoration.underline,              ]                  .map<DropdownMenuItem<TextDecoration>>(                    (TextDecoration value) => DropdownMenuItem(                      value: value,                      child: Text(value.toString()),                    ),                  )                  .toList(),              onChanged: cubit.onTextDecorationChanged,              value: cubit.textDecoration,              labelStyle: const TextStyle(),              labelText: 'Text Decoration',            ),            const SizedBox(height: 8),            AppColorPicker(              key: const ValueKey('text-decoration-color'),              labelText: 'Decoration color',              initialColor: cubit.decorationColor ?? Colors.white,              onChanged: cubit.onTextDecorationColorChanged,              labelTextStyle: const TextStyle(),            ),            const SizedBox(height: 8),            AppDropdown(              key: const ValueKey('text-decoration-style'),              items: TextDecorationStyle.values                  .map<DropdownMenuItem<TextDecorationStyle>>(                    (TextDecorationStyle value) => DropdownMenuItem(                      value: value,                      child: Text(value.name),                    ),                  )                  .toList(),              onChanged: cubit.onTextDecorationStyleChanged,              value: cubit.textDecorationStyle,              labelStyle: const TextStyle(),              labelText: 'Text Decoration Style',            ),            const SizedBox(height: 8),            const Text('Decoration Thickness'),            ValueListenableBuilder(              valueListenable: cubit.decorationThickness,              builder: (context, _, __) {                return SfSlider(                  min: 1,                  max: 100,                  enableTooltip: true,                  value: cubit.decorationThickness.value ?? 1,                  onChanged: (value) {                    cubit.decorationThickness.value = value as double;                  },                );              },            ),          ],        );      },    );  }}